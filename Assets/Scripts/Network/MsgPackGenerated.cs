// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(4)
            {
                { typeof(global::GatewayServer.PKTHeader), 0 },
                { typeof(global::GatewayServer.PKTReqLogin), 1 },
                { typeof(global::GatewayServer.PKTResLogin), 2 },
                { typeof(global::GatewayServer.PKTResLoginResult), 3 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.GatewayServer.PKTHeaderFormatter();
                case 1: return new MessagePack.Formatters.GatewayServer.PKTReqLoginFormatter();
                case 2: return new MessagePack.Formatters.GatewayServer.PKTResLoginFormatter();
                case 3: return new MessagePack.Formatters.GatewayServer.PKTResLoginResultFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GatewayServer
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class PKTHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GatewayServer.PKTHeader>
    {


        public void Serialize(ref MessagePackWriter writer, global::GatewayServer.PKTHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.PacketSize);
            writer.Write(value.PacketID);
            writer.Write(value.PacketType);
        }

        public global::GatewayServer.PKTHeader Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PacketSize__ = default(ushort);
            var __PacketID__ = default(ushort);
            var __PacketType__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PacketSize__ = reader.ReadUInt16();
                        break;
                    case 1:
                        __PacketID__ = reader.ReadUInt16();
                        break;
                    case 2:
                        __PacketType__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GatewayServer.PKTHeader();
            ____result.PacketSize = __PacketSize__;
            ____result.PacketID = __PacketID__;
            ____result.PacketType = __PacketType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PKTReqLoginFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GatewayServer.PKTReqLogin>
    {


        public void Serialize(ref MessagePackWriter writer, global::GatewayServer.PKTReqLogin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UserID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AuthToken, options);
        }

        public global::GatewayServer.PKTReqLogin Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UserID__ = default(string);
            var __AuthToken__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __UserID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AuthToken__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GatewayServer.PKTReqLogin();
            ____result.UserID = __UserID__;
            ____result.AuthToken = __AuthToken__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PKTResLoginFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GatewayServer.PKTResLogin>
    {


        public void Serialize(ref MessagePackWriter writer, global::GatewayServer.PKTResLogin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.Result);
        }

        public global::GatewayServer.PKTResLogin Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Result__ = default(ushort);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Result__ = reader.ReadUInt16();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GatewayServer.PKTResLogin();
            ____result.Result = __Result__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PKTResLoginResultFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GatewayServer.PKTResLoginResult>
    {


        public void Serialize(ref MessagePackWriter writer, global::GatewayServer.PKTResLoginResult value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UserID, options);
            writer.Write(value.isLoginOK);
        }

        public global::GatewayServer.PKTResLoginResult Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UserID__ = default(string);
            var __isLoginOK__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __UserID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __isLoginOK__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GatewayServer.PKTResLoginResult();
            ____result.UserID = __UserID__;
            ____result.isLoginOK = __isLoginOK__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

